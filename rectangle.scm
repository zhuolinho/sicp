(define (print-point p)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")")
    (newline)
)

(define (make-segment a b)
    (cons a b)
)

(define (start-segment x)
    (car x)
)

(define (end-segment x)
    (cdr x)
)

(define (make-point x y)
    (cons x y)
)

(define (x-point p)
    (car p)
)

(define (y-point p)
    (cdr p)
)

(define (midpoint-segment seg)
    (let ((start (start-segment seg))
            (end (end-segment seg)))
        (make-point (average (x-point start) (x-point end)) (average (y-point start) (y-point end)))
    )
)

(define (average x y)
    (/ (+ x y)
       2.0)
)

(define (perimeter-rectangle r)
    (let ((length (length-of-rectangle r))
            (width (width-of-rectangle r)))
        (* 2 (+ length width))
    )
)

(define (area-rectangle r)
    (let ((length (length-of-rectangle r))
            (width (width-of-rectangle r)))
        (*  length width)
    )
)

(define (make-rectangle a b c)
    (cons a (cons b c))
)

(define (length-rectangle r)
    (make-segment (car r) (car (cdr r)))
)


(define (width-rectangle r)
    (make-segment (cdr (cdr r)) (car (cdr r)))
)

(define (length-of-rectangle r)
    (let ((length (length-rectangle r)))
        (let ((start (start-segment length))
            (end (end-segment length)))
            (distance start end)
        )
    )
)

(define (width-of-rectangle r)
    (let ((length (width-rectangle r)))
        (let ((start (start-segment length))
            (end (end-segment length)))
            (distance start end)
        )
    )
)

(define (distance a b)
    (let ((ax (x-point a))
        (ay (y-point a))
        (bx (x-point b))
        (by (y-point b)))
        (sqrt (+ (square (- ax bx)) (square (- ay by))))
    )
)
