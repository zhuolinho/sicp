(define (expmod base exp m)
    (cond ((= exp 0) 1)
        ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
        ((nontrivial-square-root? base m) 0)
        (else (remainder (* base (expmod base (- exp 1) m)) m))
    )
)

(define (fermat-test n)
    (define (try-it a)
        (= (expmod a n n) a)
    )
    (try-it (+ 1 (random (- n 1))))
)

(define (fast-prime? n times)
    (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)
    )
)

(define (nontrivial-square-root? a n)
    (and (not (= a 1))
        (not (= a (- n 1)))
        (= 1 (remainder (square a) n))
    )
)

(define (Miller-Rabin-test n)
    (fast-prime? n (ceiling (/ n 2)))
)
